
CHAPTER 2

Looping a triangle

Write a loop that makes seven calls to console.log to output the following triangle:

#
##
###
####
#####
######
#######

It may be useful to know that you can find the length of a string by writing .length after it.

var triangle = “”;

for (var i = 0; i < 7 ; i++){
	triangle += “#”
	console.log(triangle);
};

———

FizzBuzz

Write a program that uses console.log to print all the numbers from 1 to 100, with two exceptions. For numbers divisible by 3, print "Fizz" instead of the number, and for numbers divisible by 5 (and not 3), print "Buzz" instead.

When you have that working, modify your program to print "FizzBuzz", for numbers that are divisible by both 3 and 5 (and still print "Fizz" or "Buzz" for numbers divisible by only one of those).



for (var i = 1; i <= 100; i++){
     if ((i % 3 === 0) && (i % 5 === 0)){
    console.log(“FizzBuzz”);

    } else if ((i % 5 === 0) && !(i % 3 === 0)){
    console.log(“Buzz”);
    } else if (i % 3 === 0){
    console.log(“Fizz”);
    } else {
    console.log(i);
}
}

—

Chess board

Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a “#” character. The characters should form a chess board.

Passing this string to console.log should show something like this:

 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #

When you have a program that generates this pattern, define a variable size = 8 and change the program so that it works for any size, outputting a grid of the given width and height.


var size = 8;
var chessString = "";


for (var counter = 0; counter < size; ){

for (var i = 1; i <= size; i++){
   chessString += (!(i % 2 === 0) ? " " : "#");
    
  
}
  counter++;
  chessString += "\n";
  console.log(counter);
  

for (var i = 1; i <= size; i++) {   
   chessString += ((i % 2 === 0) ? " " : "#");
    
  
}
  counter++;
  chessString += "\n";
  console.log(counter);

}

console.log(chessString);
console.log(counter);


CHAPTER 3

Minimum

The previous chapter introduced the standard function Math.min that returns its smallest argument. We can do that ourselves now. Write a function min that takes two arguments and returns their minimum.

var min = function ( x, y ){
  
  return ( x < y ? x : y);

}

console.log(min(0, 10));
// → 0
console.log(min(0, -10));
// → -10

——

Recursion

We’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to check whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:

    Zero is even.

    One is odd.

    For any other number N, its evenness is the same as N - 2.

Define a recursive function isEven corresponding to this description. The function should accept a number parameter and return a Boolean.

Test it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?

function isEven(num){

  if (num < 0){
  num = num * -1;
  }
    
  if (num === 0){

return true;
    
} else if (num === 1) {

  return false;
  
} else { 
  return isEven(num - 2);

}

}

console.log(isEven(50));
// → true
console.log(isEven(75));
// → false
console.log(isEven(-1));
// → ??

———

Bean counting

You can get the Nth character, or letter, from a string by writing "string".charAt(N), similar to how you get its length with "s".length. The returned value will be a string containing only one character (for example, "b"). The first character has position zero, which causes the last one to be found at position string.length - 1. In other words, a two-character string has length 2, and its characters have positions 0 and 1.

Write a function countBs that takes a string as its only argument and returns a number that indicates how many uppercase “B” characters are in the string.

Next, write a function called countChar that behaves like countBs, except it takes a second argument that indicates the character that is to be counted (rather than counting only uppercase “B” characters). Rewrite countBs to make use of this new function.

function countBs(string){
  
 
  return countChar(string, "B");
}

function countChar(string, char){
  var result = "";
  var counter = 0;
  
  for (var i = 0; i < string.length; i++ ){
    result = string.charAt(i);
    if(result === char){
       counter++;
       }
}
  return counter;
  
  
}

console.log(countBs("BBC"));
// → 2
console.log(countChar("kakkerlak", "k"));
// → 4

CHAPTER 4 - DATA STRUCTURES: OBJECTS AND ARRAYS

The sum of a range

The introduction of this book alluded to the following as a nice way to compute the sum of a range of numbers:

console.log(sum(range(1, 10)));

Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to (and including) end.

Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the previous program and see whether it does indeed return 55.

As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” value used to build up the array. If no step is given, the array elements go up by increments of one, corresponding to the old behavior. The function call range(1, 10, 2) should return [1, 3, 5, 7, 9]. Make sure it also works with negative step values so that range(5, 2, -1) produces [5, 4, 3, 2].

// Your code here.

function range(x, y){
  var resultArray = [];
   for (var i = x; i <= y; i++){
     resultArray.push(i);
  }
  
  return resultArray;
}

 function sum(arr){
    var result = 0;
    for (var i = 0; i < arr.length; i++){
      result += arr[i]; 
      
     }
   return result;
 }

console.log(sum(range(1, 10)));
// → 55
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]


Reversing an array

Arrays have a method reverse, which changes the array by inverting the order in which its elements appear. For this exercise, write two functions, reverseArray and reverseArrayInPlace. The first, reverseArray, takes an array as argument and produces a new array that has the same elements in the inverse order. The second, reverseArrayInPlace, does what the reverse method does: it modifies the array given as argument in order to reverse its elements. Neither may use the standard reverse method.

Thinking back to the notes about side effects and pure functions in the previous chapter, which variant do you expect to be useful in more situations? Which one is more efficient?

function reverseArray(arr){
  var newArray = [];
  for(var i = 0; i < arr.length; i++){
    newArray.unshift(arr[i]);
  }
  return newArray;
}

function reverseArrayInPlace(arr){
  var counter = 0;
  var secondArray = [];
  for (var i = arr.length - 1; i >= 0 ; i--){
    secondArray[counter] = (arr[i]);
    counter++;
  }
  for (i = 0; i < secondArray.length; i++){
    arr[i] = secondArray[i];
  }
  return arr;
}

console.log(reverseArray(["A", "B", "C"]));
// → ["C", "B", "A"];
var arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
// → [5, 4, 3, 2, 1]

